# -*- coding: utf-8 -*-
"""Honey_Price_Prediciton+EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GxXjmO-SWE1v83MHCjE1ae88bGXYbK0Y

# Dataset Description

# CS (Color Score): <br/>
Represents the color score of the honey sample, ranging from 1.0 to 10.0. Lower values indicate a lighter color, while higher values indicate a darker color.

# Density: <br/>
Represents the density of the honey sample in grams per cubic centimeter at 25°C, ranging from 1.21 to 1.86.

# WC (Water Content): <br/>
Represents the water content in the honey sample, ranging from 12.0% to 25.0%.

# pH: <br/>
Represents the pH level of the honey sample, ranging from 2.50 to 7.50.

# EC (Electrical Conductivity): <br/>
Represents the electrical conductivity of the honey sample in milliSiemens per centimeter.

# F (Fructose Level): <br/>
Represents the fructose level of the honey sample, ranging from 20 to 50.

# G (Glucose Level): <br/>
Represents the glucose level of the honey sample, ranging from 20 to 45.

# Pollen_analysis: <br/>
Represents the floral source of the honey sample. Possible values include Clover, Wildflower, Orange Blossom, Alfalfa, Acacia, Lavender, Eucalyptus, Buckwheat, Manuka, Sage, Sunflower, Borage, Rosemary, Thyme, Heather, Tupelo, Blueberry, Chestnut, and Avocado.

# Viscosity: <br/>
Represents the viscosity of the honey sample in centipoise, ranging from 1500 to 10000. Viscosity values between 2500 and 9500 are considered optimal for purity.

# Purity: <br/>
The target variable represents the purity of the honey sample, ranging from 0.01 to 1.00.

# Price: <br/>
The calculated price of the honey.

# 1.Importing Required Libraries


> This code imports essential libraries for data analysis and visualization: `pandas` for data manipulation, `numpy` for numerical operations, `matplotlib.pyplot` and `seaborn` for plotting, and suppresses warning messages using `warnings.filterwarnings('ignore')`.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""# 2.Loading the data Set"""

df = pd.read_csv('/content/honey_purity_dataset.csv')

df.head(10)

"""# 3.Initial Data Understanding


*   shape
*   info
*   describe
*   null values handling
*   duplicate values







"""

df.shape

df.isnull().sum()

df.dropna(inplace=True)

df.isnull().sum()

df.duplicated().sum()

df.describe()

"""# 4. Feature Encoding

> This code snippet uses `LabelEncoder` from `sklearn.preprocessing` to convert the categorical column `Pollen_analysis` in the dataframe `df` into numeric labels. The `fit_transform` method encodes the categorical values, replacing them with corresponding integers.
"""

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['Pollen_analysis'] = le.fit_transform(df['Pollen_analysis'])

"""# 4. Exploratory Data Analysis

> This code creates a heatmap to visualize the correlation matrix of the dataset `df`, with annotations showing correlation values. The heatmap uses a 'coolwarm' color scheme, displays values formatted to two decimal places, and includes black lines separating the cells. The plot is displayed using `plt.show()`.
"""

plt.figure(figsize=(10,8))
sns.heatmap(df.corr(),annot=True,cmap='coolwarm',fmt='.2f',linewidths=1,linecolor='black')
plt.show()

"""> This code snippet creates a scatter plot using Seaborn to visualize the relationship between the `pH` level (x-axis) and `Purity` (y-axis) of honey samples in the dataframe `df`. The plot is displayed with a figure size of 10 by 8 inches using `plt.show()`."""

plt.figure(figsize=(10,8))
sns.scatterplot(x='pH',y='Purity',data=df)
plt.show()

""">  This code creates a scatter plot using Seaborn to visualize the relationship between `Density` (x-axis) and `Purity` (y-axis) of honey samples in the dataframe `df`, with different colors representing different values of `Pollen_analysis`. The plot is displayed using `plt.show()`."""

sns.scatterplot(x='Density',y='Purity',data=df,hue='Pollen_analysis')
plt.show()

""">  This code creates a bar plot using Seaborn to display the average `pH` levels (y-axis) for each category in `Pollen_analysis` (x-axis) from the dataframe `df`. The plot is set to a figure size of 10 by 8 inches and displayed using `plt.show()`."""

plt.figure(figsize=(10,8))
sns.barplot(x='Pollen_analysis',y='pH',data=df)
plt.show()

"""> This code snippet creates a scatter plot using Seaborn to visualize the relationship between `Purity` (x-axis) and `Price` (y-axis) of honey samples in the dataframe `df`, with the points colored red. The plot is displayed using `plt.show()`."""

sns.scatterplot(x='Purity',y='Price',data=df,color='red')
plt.show()

"""> This code snippet creates a scatter plot using Seaborn to visualize the relationship between `pH` (x-axis) and `Price` (y-axis) of honey samples in the dataframe `df`, with the points colored green. The plot is displayed using `plt.show()`."""

sns.scatterplot(x='pH',y='Price',data=df,color='green')
plt.show()

sns.scatterplot(x='CS',y='Purity',data=df,color='blue')
plt.show()

sns.scatterplot(x='Density',y='Price',data=df,color='orange')
plt.show()

sns.scatterplot(x='CS',y='Price',data=df,color='purple')
plt.show()

sns.scatterplot(x='WC',y='Price',data=df,color='black')
plt.show()

sns.pairplot(df,hue='Pollen_analysis')
plt.show()

"""# 5. Analysis of Numerical Variables"""

df['CS'].mean()

df['CS'].value_counts()

df['CS'].max()

"""**On researching, The density of honey typically ranges between 1.38 and 1.45 kg/L at 20 °C. (While its not confirmed about the temperature) The average Density almost matches the actual value.**"""

df['Density'].mean()

df.groupby('Pollen_analysis')['Density'].mean()

"""**On researching, The Average pH value of a honey ==3.9. While here it is 4.9**"""

df['pH'].mean()

"""**The average Fructose level wikipedia reports is 40.9g , while here it is almost 35g .**"""

df['F'].mean()

"""**The average Glucose level wikipedia reports is 35.8g, while here it is almost matches, 32.5g**"""

df['G'].mean()

"""**Values of electrical conductivity in the investigated honey samples were between 0.08 and 1.99 ms/cm.** <br/>
**the value here is 0.799 ms/cm**
"""

df['EC'].mean()

"""**However, the optimal viscosity for honey is often considered to be between 2500 and 9500 cP, as it indicates good quality and purity.** <br/>

**Here the average viscosity is 5760.1 cP**










"""

df['Viscosity'].mean()

df.info()

"""# 6. Feature Splitting

> This code assigns `X` as a dataframe containing all columns from `df` except `Price`, effectively dropping the `Price` column. `y` is assigned the `Price` column, which serves as the target variable for prediction or analysis tasks.
"""

X = df.drop(['Price'],axis=1)
y = df['Price']

"""#7. Train_Test_Split

> This code snippet uses `train_test_split` from `sklearn.model_selection` to split the dataset into training and testing sets. `X_train` and `X_test` contain the feature variables (excluding `Price`), while `y_train` and `y_test` contain the corresponding target variable (`Price`). The `test_size` parameter is set to 0.2, indicating an 80-20 split for training and testing data, and `random_state` is set to 42 for reproducibility in the split.
"""

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)

X_train.shape

y_train.shape

"""# 8. Model Building

> DecisionTreeRegressor

> This code initializes a Decision Tree Regressor model from `sklearn.tree` and fits it to the training data (`X_train` and `y_train`). The model is now trained and ready to make predictions on new data.
"""

from sklearn.tree import DecisionTreeRegressor
dt = DecisionTreeRegressor()
dt.fit(X_train,y_train)

"""# 9. Model Prediction

> Using the trained Decision Tree Regressor ('dt'), y_pred predicts the 'Price' values for the test dataset ('X_test')
"""

y_pred = dt.predict(X_test)

"""# 10. Model Efficiency and Evaluation

> This code calculates and prints evaluation metrics for the regression model predictions:

> - **R2 Score**: Measures the proportion of variance in the dependent variable (`Price`) that is predictable from the independent variables.
> - **Mean Absolute Error (MAE)**: Average of the absolute differences between predicted and actual values.
> - **Mean Squared Error (MSE)**: Average of the squared differences between predicted and actual values.

> These metrics help assess how well the model performs in predicting the `Price` of honey based on the features in the test dataset (`X_test` and `y_test`).
"""

from sklearn.metrics import r2_score,mean_absolute_error,mean_squared_error
print('R2 Score:',r2_score(y_test,y_pred))
print('Mean Absolute Error:',mean_absolute_error(y_test,y_pred))
print('Mean Squared Error:',mean_squared_error(y_test,y_pred))

"""# 11. Model Evaluation and Visualization

> This code will produce a scatter plot where each point represents a sample from the test set. The x-axis shows the actual `Price` values (`y_test`), and the y-axis shows the predicted `Price` values (`y_pred`). The line represents the regression line fitted to the data points, giving an indication of how well the predictions align with the actual values.
"""

# Plotting actual vs predicted values
plt.figure(figsize=(8, 6))
sns.regplot(x=y_test, y=y_pred, scatter_kws={'alpha':0.5})
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted Price')
plt.grid(True)
plt.show()

"""# 12. Pickling the file"""

import pickle
pickle.dump(dt,open('model.pkl','wb'))

